// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Game {
  id          String     @id @default(cuid())
  code        String     @unique // 6-char join code
  status      GameStatus @default(LOBBY) // LOBBY|RUNNING|PAUSED|FINISHED
  currentTurn Int        @default(0) // index in players array
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  settings    Json // startingCash, houseLimit, freeParkingRule, auctionOnNoBuy, etc.
  version     Int        @default(1) // optimistic concurrency control

  players Player[]
  tiles   Tile[] // snapshot of board for this game
  logs    GameLog[]
  trades  Trade[]

  @@map("games")
}

model Player {
  id          String  @id @default(cuid())
  userId      String?
  gameId      String
  name        String
  cash        Int
  position    Int     @default(0)
  inJail      Boolean @default(false)
  jailTurns   Int     @default(0)
  doublesInRow Int    @default(0)
  bankrupt    Boolean @default(false)
  order       Int // play order
  color       String
  isConnected Boolean @default(true)

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  properties Property[]
  tradesFrom Trade[] @relation("TradeFrom")
  tradesTo   Trade[] @relation("TradeTo")

  @@unique([gameId, order])
  @@map("players")
}

model Tile {
  id           String   @id @default(cuid())
  gameId       String
  index        Int
  type         TileType
  name         String
  color        String?
  price        Int?
  baseRent     Int?
  groupKey     String?
  railroadGroup String?
  utilityGroup String?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  properties Property[]

  @@unique([gameId, index])
  @@map("tiles")
}

model Property {
  id        String @id @default(cuid())
  gameId    String
  tileId    String
  ownerId   String?
  mortgaged Boolean @default(false)
  houses    Int    @default(0)
  hotel     Boolean @default(false)

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tile Tile @relation(fields: [tileId], references: [id], onDelete: Cascade)
  owner Player? @relation(fields: [ownerId], references: [id])

  @@unique([gameId, tileId])
  @@map("properties")
}

model GameLog {
  id       String   @id @default(cuid())
  gameId   String
  ts       DateTime @default(now())
  actorId  String?
  type     String
  payload  Json

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_logs")
}

model Trade {
  id              String      @id @default(cuid())
  gameId          String
  fromId          String
  toId            String
  status          TradeStatus @default(PENDING)
  cashFrom        Int         @default(0)
  cashTo          Int         @default(0)
  fromPropertyIds String[]
  toPropertyIds   String[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  from Player @relation("TradeFrom", fields: [fromId], references: [id])
  to   Player @relation("TradeTo", fields: [toId], references: [id])

  @@map("trades")
}

enum GameStatus {
  LOBBY
  RUNNING
  PAUSED
  FINISHED
}

enum TileType {
  GO
  PROPERTY
  RAILROAD
  UTILITY
  TAX
  CHANCE
  CHEST
  JAIL
  GO_TO_JAIL
  FREE_PARKING
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
